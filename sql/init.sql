
-- 表1： 创建 demo 笔记表
create table
  public.nuxtbase_demo_notes (
    id bigint generated always as identity,
    content text not null,
    created_at timestamp with time zone not null default timezone ('utc'::text, now()),
    user_id uuid not null default auth.uid(),
    updated_at timestamp with time zone not null default timezone ('utc'::text, now()),
    constraint nuxtbase_demo_notes_pkey primary key (id)
  ) tablespace pg_default;

alter table public.nuxtbase_demo_notes enable row level security;

create policy "Users can manage their own notes" on public.nuxtbase_demo_notes
  for all 
  using (auth.uid() = user_id)
  with check (auth.uid() = user_id); 

create or replace function update_updated_at_column()
returns trigger as $$
begin
    new.updated_at = now();
    return new;
end;
$$ language plpgsql;

create trigger update_nuxtbase_demo_notes_updated_at
    before update on nuxtbase_demo_notes
    for each row
    execute function update_updated_at_column();


-- 表2： 创建支付历史记录表
create table if not exists public.nuxtbase_payment_history (
    id bigint generated by default as identity not null,
    uid uuid not null,
    product_id text not null,
    product_name text not null,              
    payment_mode text not null,              
    payment_provider text not null,          
    amount decimal not null,                 
    currency text not null default 'CNY',    
    status text not null,                    
    out_trade_no text not null,
    meta jsonb,                             
    created_at timestamp with time zone not null default now(),
    updated_at timestamp with time zone not null default now(),
    constraint nuxtbase_payment_history_pkey primary key (id),
    constraint nuxtbase_payment_history_out_trade_no_key unique (out_trade_no)
);

alter table public.nuxtbase_payment_history enable row level security;

create policy nuxtbase_payment_history_policy on public.nuxtbase_payment_history for select using (uid = auth.uid());


-- 表3： 创建用户订阅记录表
create table if not exists public.nuxtbase_user_subscription (
    id bigint generated by default as identity not null,
    uid uuid not null,
    product_id text not null,               
    status text not null,                    
    payment_provider text not null,          
    start_time timestamp with time zone not null,
    expire_time timestamp with time zone not null,
    out_trade_no text not null,
    created_at timestamp with time zone not null default now(),
    updated_at timestamp with time zone not null default now(),
    constraint nuxtbase_user_subscription_pkey primary key (id),
    constraint nuxtbase_user_subscription_out_trade_no_key unique (out_trade_no)
);

create or replace function update_updated_at_column()
returns trigger as $$
begin
    new.updated_at = now();
    return new;
end;
$$ language plpgsql;

create trigger update_nuxtbase_user_subscription_updated_at
    before update on nuxtbase_user_subscription
    for each row
    execute function update_updated_at_column();

alter table public.nuxtbase_user_subscription enable row level security;

create policy nuxtbase_user_subscription_policy on public.nuxtbase_user_subscription 
    for select using (uid = auth.uid()); 

